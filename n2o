#! /usr/bin/env gforth-fast
\ -*- mode: Forth -*-

require net2o.fs
require net2o-vault.fs

: del-last-key ( -- )
    keys $[]# 1- keys $[] sec-off
    keys $@len cell- keys $!len ;

: choose-key ( -- o )
    0 BEGIN  drop
	." Choose nick:" cr .secret-nicks
	key '0' - 0 max secret-key dup
    UNTIL ;

\ will ask for your password and if possible auto-select your id

: get-me ( -- ) read-keys secret-keys#
    BEGIN  dup 0= WHILE drop
	    ." Enter your net2o passphrase: " +passphrase
	    read-keys secret-keys# dup 0= IF
		."  wrong passphrase, no key found" del-last-key
	    THEN  cr
    REPEAT
    1 = IF  0 secret-key  ELSE  choose-key  THEN  >raw-key ;

: get-me-again ( -- )
    secret-keys# ?EXIT  get-me ;

Variable key-readin

: out-key ( o -- )
    >o pack-pubkey ke-nick $@ o>
    [: type ." .n2o" ;] $tmp w/o create-file throw
    >r keypack-buf cmdbuf# @ r@ write-file throw r> close-file throw ;
: out-me ( -- )
    pkc keysize key-table #@ 0= !!unknown-key!!
    cell+ out-key ;
: arg-loop { xt -- }
    begin  ?nextarg  while  xt execute  repeat ;
: ?@nextarg ( -- addr u noarg-flag )
    argc @ 1 > IF
	1 arg drop c@ '@' = IF  next-arg 1 /string true  EXIT  THEN
    THEN  false ;
: @arg-loop { xt -- }
    begin  ?@nextarg  while  xt execute  repeat ;

: out-nicks ( -- )
    [: nick-key ?dup-IF  out-key  THEN ;] @arg-loop ;

Variable key-list

: pk-off ( -- ) key-list $[]off ;
: +pk ( "name" -- )  pk' keysize umin key-list $+[]! ;

: args>keylist ( -- )
    [: nick-key ?dup-IF  >o ke-pk $@ o> keysize umin key-list $+[]!  THEN ;]
    @arg-loop ;
: .85info ( addr u -- )
    info-color attr! 85type default-color attr! ;

$20 value hash-size#

: hash-file ( addr u -- hash u' )
    c:0key slurp-file 2dup c:hash drop free throw pad c:key>
    pad hash-size# ;

\ commands for the command line user interface

Vocabulary net2o-cmds

get-current also net2o-cmds definitions

: help ( -- )
    \G usage: n2o help
    [ loadfilename 2@ ] sliteral "0" replaces
    ?nextarg IF  "cmd" replaces
	"grep -E '\\G u[s]age: n2o %cmd%|\\G %cmd%: ' %0% | sed -e 's/ *\\\\G u[s]age: //g' -e 's/ *\\\\G %cmd%: //g'"
    ELSE
	"grep '\\G u[s]age: n2o ' %0% | sed -e 's/ *\\\\G u[s]age: //g'"
    THEN
    $substitute drop system ;

set-current

: next-cmd ( -- )
    next-arg ['] net2o-cmds >body search-wordlist
    IF  execute  ELSE  help  THEN ;

get-current net2o-cmds definitions

: keyin ( -- )
    \G usage: n2o keyin file
    \G keyin: read a .n2o key file in
    get-me keys key>default
    next-arg key-readin $slurp-file
    key-readin $@ do-key
    save-pubkeys ;
: keyout ( -- )
    \G usage: n2o keyout [@user1 .. @usern]
    \G keyout: output pubkey of your identity
    get-me argc @ 1 > IF  out-nicks  ELSE  out-me  THEN ;
: keygen ( -- )
    \G usage: n2o keygen nick
    +newphrase key>default
    next-arg 2dup key#user +gen-keys .rsk
    read-keys .keys out-me ;
: keylist ( -- )
    \G usage: n2o keylist
    get-me
    key-table [: cell+ $@ drop cell+ >o
      ke-pk $@ keysize umin .85info space ke-nick $@ type cr o> ;] #map ;

\ encryption subcommands
  
: +threefish ( -- )
    \G usage: n2o +threefish <next-cmd>
    enc-threefish next-cmd ;
: +keccak ( -- )
    \G usage: n2o +keccak <next-cmd>
    enc-keccak next-cmd ;

: enc ( -- )
    \G usage: n2o enc @user1 .. @usern files
    get-me args>keylist
    [: key-list encrypt-file ;] arg-loop ;
: dec ( -- )
    \G usage: n2o dec file
    get-me [: decrypt-file ;] arg-loop ;
: cat ( -- )
    \G usage: n2o cat file
    vault>out dec ;

\ hash+signature

: -256 ( -- )
    \G usage: n2o -256 <next-cmd>
    \G +256: set hash output to 256 bits (default)
    $20 to hash-size# next-cmd ;

: -512 ( -- )
    \G usage: n2o -512 <next-cmd>
    \G +512: set hash output to 256 bits (default)
    $40 to hash-size# next-cmd ;

: hash ( -- )
    \G usage: n2o hash files
    enc-mode @ 8 rshift $FF and >crypt
    [: 2dup hash-file .85info space type cr ;] arg-loop 0 >crypt ;

: sign ( -- )
    \G usage: n2o sign files
    get-me now>never
    [: 2dup hash-file 2drop
      [: type ." .s2o" ;] $tmp w/o create-file throw >r
      [: .pk .sig ;] $tmp r@ write-file r> close-file throw throw ;]
    arg-loop ;

: verify ( -- )
    \G usage: n2o verify files
    \G verify: check integrity of files vs. detached signature
    get-me
    [: 2dup hash-file 2drop 2dup type
      [: type ." .s2o" ;] $tmp slurp-file
      over date-sig? dup >r  info-color err-color r> select  attr! .check
      space over keysize .key-id default-color attr!
      drop free throw cr ;]
    arg-loop ;

\ server mode

: -lax ( -- )
    \G usage: n2o -lax <next-cmd>
    \G -lax: open for all keys
    strict-keys off next-cmd ;

: server ( -- )
    \G usage: n2o server
    get-me init-server server-loop ;

\ chat mode

: -root ( -- )
    \G usage: n2o -root <address[:port]> <next-cmd> ;
    next-arg ':' $split dup IF  s>number drop to net2o-port
    ELSE  2drop  THEN  net2o-host $!
    next-cmd ;

: chat ( -- )
    \G usage: chat @user
    get-me init-client announce-me
    ?@nextarg IF
	." press key to connect to " 2dup type key drop
	$A $A 2swap nick-connect do-chat c:disconnect  THEN ;

set-current

: +? ( addr u -- flag )  0= IF  drop false  EXIT  THEN  c@ '+' = ;

: ++debug ( -- )
    BEGIN  argc @ 1 > WHILE  1 arg +?  WHILE
		1 arg debug-eval $!
		s" db " debug-eval 1 $ins
		s" (" debug-eval $+!
		debug-eval $@ evaluate
		shift-args
	REPEAT  THEN ;

script? [IF] ++debug \ read in all debugging stuff
    argc @ 1 > [IF] next-cmd [ELSE] help [THEN] bye  [THEN]

previous